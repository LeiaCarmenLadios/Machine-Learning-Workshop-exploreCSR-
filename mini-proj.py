# -*- coding: utf-8 -*-
"""Copy of exploreCSR-ML-mini-project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nH6-HVoZNWIKHqbaWNXkwLxkvmyN45Ek

# **Mini-Project**
In this mini-project, you have to construct a neural network that **recognizes different items of clothing**. Complete each task and answer each question below by filling in the blanks (`...`) with one or more lines of code or text.

### **Part 1: Preparing and Exploring the Data**

First, we import the `TensorFlow` library.
"""

import tensorflow as tf

"""Next, we load the Fashion MNIST dataset, which has images of items of clothing. The images in the Fashion MNIST dataset are divided into a training set and a test set."""

data = tf.keras.datasets.fashion_mnist
(x_train, y_train), (x_test, y_test) = data.load_data()

"""**Question 01:** Explore the Fashion MNIST dataset and answer the following questions. How many images are in the training set? How many images are in the test set? What is the size of each of these images?

**Answer:** ...

**Task 01:** Print some of the images in the training set and their corresponding class labels.
"""

import matplotlib.pyplot as plt
import numpy as np

plt.imshow(x_train[0])
np.unique(y_train)

"""**Question 02:** How many different classes are in the dataset? What do each of these classes represent?

**Answer:** 10 different classes that represent the basic description of a piece of clothing.

**Task 02:** Reshape and normalize the training set and the test set so we can construct a convolutional neural network.
"""

x_train = x_train.reshape(60000, 28, 28, 1)                 
x_train = x_train/255.0
x_test = x_test.reshape(10000, 28, 28, 1)
x_test = x_test/255.0

"""### **Part 2: Training and Testing a Deep Neural Network**

**Task 03:** Train and test a deep neural network (with no convolutional layers) to classify the images in the Fashion MNIST dataset.
"""

model = tf.keras.models.Sequential([
  tf.keras.layers.Flatten(input_shape=(28, 28)), # input layer
  tf.keras.layers.Dense(128, activation=tf.nn.relu), # hidden layer
  tf.keras.layers.Dense(10, activation=tf.nn.softmax) # output layer
])
model.summary()
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])
model.fit(x_train,y_train, epochs = 7)
model.evaluate(x_test, y_test)

"""**Question 03:** Repeat the previous task using different numbers of layers, neurons, and epochs (extra points if you do this in a systematic way using a `for` loop!) and answer the following questions. How many layers, neurons, and epochs did you try? What is the best accuracy achieved using a deep neural network? What is the structure of this neural network (i.e., number of layers, neurons, and epochs)? What is the training time?

**Answer:** The best accuracy I was able to achieve was 88.24%.

### **Part 3: Training and Testing a Convolutional Neural Network**

**Task 04:** Train and test a convolutional neural network (with convolutional layers) to classify the images in the Fashion MNIST dataset.
"""

model = tf.keras.models.Sequential([
  tf.keras.layers.Conv2D(70, (3, 3), activation='relu', input_shape=(28, 28, 1)), # convolutional layer
  tf.keras.layers.MaxPooling2D(2, 2), # pooling layer
  tf.keras.layers.Flatten(input_shape=(28, 28)), # input layer
  tf.keras.layers.Dense(128, activation=tf.nn.relu), # hidden layer
  tf.keras.layers.Dense(10, activation=tf.nn.softmax) # output layer
])
model.summary()
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])
model.fit(x_train,y_train, epochs = 7)
model.evaluate(x_test, y_test)

"""**Question 04:** Repeat the previous task using different numbers of layers, convolutions, neurons, and epochs (extra points if you do this in a systematic way using a `for` loop!) and answer the following questions. How many layers, neurons, and epochs did you try? and answer the following questions. What is the best accuracy achieved using a convolutional neural network? What is the structure of this neural network (i.e., number of layers, neurons, and epochs)? What is the training time?

**Answer:** The best accuracy that I was able to achieve was 91.39% accuracy as shown above.
"""
