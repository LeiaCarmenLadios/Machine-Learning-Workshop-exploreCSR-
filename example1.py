# -*- coding: utf-8 -*-
"""Copy of exploreCSR-ML-example_01.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LIJSnBKXC9Wo_JnSRD3I_nNUuJl6jG-J

# **Example 01**
In this example, we will construct our first **neural network**.

First, we import the `TensorFlow` and `numpy` libraries.
"""

import tensorflow as tf #developed library for machine learning by google.
import numpy as np

"""We want our neural network to "learn" the relationship between the following lists of numbers `x` and `y`.

**Can you figure out the relationship between these numbers?**
"""

x = np.array([-1.0,  0.0, 1.0, 2.0, 3.0, 4.0], dtype=float)
y = np.array([-3.0, -1.0, 1.0, 3.0, 5.0, 7.0], dtype=float) # y = 2x + 1

"""We create the simplest possible neural network. It has 1 layer, that layer has 1 neuron, and the input is just 1 value."""

model = tf.keras.Sequential([tf.keras.layers.Dense(units=1, input_shape=[1])]) #only one dense layer
model.summary()

"""Next, we compile the neural network by specifying a **loss function** and an **optimization algorithm**."""

model.compile(optimizer='sgd', loss='mean_squared_error')

"""Let's now **train** our neural network to fit the data. The neural network will try to guess the relationship between the numbers in `x` and the numbers in `y`. The loss function will measure how good or how bad this guess is and, based on this, the optimization algorithm will make another guess. We then repeat this process for a certain number of iterations (`epochs`)."""

model.fit(x, y, epochs=500)

"""Finally, let's test our neural network by using it to predict the value of `y` for a previously unseen value of `x` (for example, `x=10`). **What do you think the value of `y` will be?** """

print(model.predict([10.0]))  # this should be 19

"""**Was this the value of `y` that you were expecting? If not, why do you think that is?**

## **Activity 01**
In this activity, you have to construct a **neural network** to "learn" the relationship between two lists `x` and `y`. Note that each element of `x` is a pair of numbers `(x1, x2)`.
"""

x = np.array([(1.0, 2.0), (3.0, 1.0), (2.0, 2.0), (2.0, 3.0), (4.0, 2.0), (2.0, 0.0)], dtype=float)
y = np.array([5.0, 5.0, 6.0, 8.0, 8.0, 2.0], dtype=float)

"""**What is the relationship between `(x1, x2)` and `y`?**

**Answer:** x1 + 2(x2)

Create a neural network that has **1 layer** with **1 neuron** and receives as input **2 values**.
"""

model = tf.keras.models.Sequential([tf.keras.layers.Dense(units=1, input_shape=[2])])
model.summary()

"""Compile the neural network. Use **mean_squared_error** as the loss function and **sgd** as the optimization algorithm."""

model.compile(optimizer='sgd', loss='mean_squared_error')

"""Train the neural network for **500** epochs."""

model.fit(x, y, epochs = 600)

"""Use the neural network to predict the value of **`(2, 4)`**.


"""

print(model.predict([(2,4)]))

"""**Is this the value that you were expecting?**

**Answer:** 2 + 8 = 10
"""
